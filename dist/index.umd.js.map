{"version":3,"file":"index.umd.js","sources":["../src/utils/getBasicImageProps.js","../src/defaults.js","../src/utils/helpers.js","../src/utils/buildImageUrl.js","../src/getFixedGatsbyImage.js","../src/getFluidGatsbyImage.js"],"sourcesContent":["const validImageUrlPattern = /^(https?:)?\\/\\/a.storyblok.com\\/f\\/*[0-9]+\\/*[0-9]*x*[0-9]*\\/[A-Za-z0-9]+\\/[\\S]+\\.[a-zA-Z]+/\n\nfunction getBasicImageProps(image) {\n  let url = null\n  let lqip = null\n\n  if (typeof image === 'string') {\n    url = image\n  }\n\n  if (typeof image === 'object') {\n    url = image.image\n    lqip = image.base64 ? image.base64 : null\n  }\n\n  url = validImageUrlPattern.test(url) ? url : null\n\n  if (!url) {\n    return false\n  }\n\n  const storyblokRegex = /^(https?:)?\\/\\/a.storyblok.com\\//\n  let originalPath = url.replace(storyblokRegex, '')\n\n  let [, , dimensions, , filename] = originalPath.split('/')\n  let [width, height] = dimensions.split('x').map((num) => parseInt(num, 10))\n  let [, extension] = filename.split('.')\n\n  let aspectRatio = width / height\n  let metadata = { dimensions: { width, height, aspectRatio }, lqip }\n\n  return {\n    originalPath,\n    extension,\n    metadata\n  }\n}\n\nexport default getBasicImageProps","export const DEFAULT_FIXED_WIDTH = 400\nexport const DEFAULT_FLUID_MAX_WIDTH = 800\nexport const STORYBLOK_BASE_URL = 'https://a.storyblok.com'\n\nexport const sizeMultipliersFixed = [1, 1.5, 2, 3]\nexport const sizeMultipliersFluid = [0.25, 0.5, 1, 1.5, 2, 3]\n\nexport const defaultOptions = {\n  smartCrop: true,\n  format: null,\n  fill: null,\n  toFormat: null,\n  base64: null,\n  useBase64: true,\n  quality: 100\n}\n\nexport const defaultFluidOptions = {\n  ...defaultOptions,\n  maxWidth: DEFAULT_FLUID_MAX_WIDTH,\n  maxHeight: null\n}\n\nexport const defaultFixedOptions = {\n  ...defaultOptions,\n  width: DEFAULT_FIXED_WIDTH,\n  height: null\n}\n","export function applyFilters(filters) {\n  return filters.reduce((acc, currentFilter, i) => {\n    return `${acc}:${currentFilter}`\n  }, '/filters')\n}\n\nexport function isWebP(url) {\n  const isConverted = url.includes('filters:format(webp)')\n  const isOriginal = /[a-f0-9]+-\\d+x\\d+\\.webp/.test(url)\n  return isConverted || isOriginal\n}\n","import { STORYBLOK_BASE_URL } from '../defaults'\nimport { applyFilters } from './helpers'\n\nfunction buildImageUrl(originalPath, image) {\n  let { width, height, smartCrop, quality, format, fill } = image\n\n  let [, extension] = originalPath.split('.')\n\n  let url = STORYBLOK_BASE_URL\n\n  url += `/${originalPath}/m`\n\n  if (width && height) {\n    url += `/${width}x${height}`\n  }\n\n  if (smartCrop) {\n    url += `/smart`\n  }\n\n  let filters = [\n    ...[quality && `quality(${quality})`],\n    ...[format && format !== extension && `format(${format})`],\n    ...[fill && `fill(${fill})`]\n  ]\n\n  // remove falsy elements\n  filters = filters.filter((element) => Boolean(element) === true)\n\n  if (filters.length > 0) {\n    url += applyFilters(filters)\n  }\n\n  return url\n}\n\nexport function buildLowFiUrl(originalPath, { width, height, aspectRatio }) {\n  return buildImageUrl(originalPath, {\n    width: (width / 3).toFixed(0),\n    height: (height / 3).toFixed(0),\n    quality: 10\n  })\n}\n\nexport default buildImageUrl\n","import getBasicImageProps from './utils/getBasicImageProps'\nimport buildUrl, { buildLowFiUrl } from './utils/buildImageUrl'\nimport { isWebP } from './utils/helpers'\nimport { sizeMultipliersFixed, defaultFixedOptions } from './defaults'\n\nfunction getFixedGatsbyImage(image, args = {}) {\n  let imageProps = getBasicImageProps(image)\n\n  if (!imageProps) {\n    return null\n  }\n\n  let options = {\n    ...defaultFixedOptions,\n    ...args\n  }\n\n  let { width, height, base64, useBase64 } = options\n  let {\n    metadata: { dimensions, lqip },\n    originalPath\n  } = imageProps\n\n  let desiredAspectRatio = dimensions.aspectRatio\n\n  // If we're cropping, calculate the specified aspect ratio\n  if (options.height) {\n    desiredAspectRatio = width / options.height\n  }\n\n  let forceConvert = null\n  if (options.toFormat) {\n    forceConvert = options.toFormat\n  } else if (isWebP(originalPath)) {\n    forceConvert = 'jpg'\n  }\n\n  let widths = sizeMultipliersFixed.map((scale) => Math.round(width * scale))\n  let initial = { webp: [], base: [] }\n\n  let srcSets = widths\n    .filter((currentWidth) => currentWidth < dimensions.width)\n    .reduce((acc, currentWidth, i) => {\n      let resolution = `${sizeMultipliersFixed[i]}x`\n      let currentHeight = Math.round(currentWidth / desiredAspectRatio)\n\n      let size = {\n        ...options,\n        width: currentWidth,\n        height: currentHeight\n      }\n\n      let webpUrl = buildUrl(originalPath, {\n        ...size,\n        ...{ format: 'webp' }\n      })\n\n      let baseUrl = buildUrl(originalPath, {\n        ...size,\n        ...(forceConvert && { format: forceConvert })\n      })\n\n      acc.webp.push(`${webpUrl} ${resolution}`)\n      acc.base.push(`${baseUrl} ${resolution}`)\n\n      return acc\n    }, initial)\n\n  let outputHeight = Math.round(height ? height : width / desiredAspectRatio)\n\n  let imgSize = {\n    ...options,\n    width: width,\n    height: outputHeight\n  }\n\n  let src = buildUrl(originalPath, {\n    ...imgSize,\n    ...(forceConvert && { format: forceConvert })\n  })\n\n  let srcWebp = buildUrl(originalPath, {\n    ...imgSize,\n    ...{ format: 'webp' }\n  })\n\n  // base64String\n\n  return {\n    base64: buildLowFiUrl(originalPath, { width, height, aspectRatio: desiredAspectRatio }),\n    aspectRatio: desiredAspectRatio,\n    width: Math.round(width),\n    height: outputHeight,\n    src,\n    srcWebp,\n    srcSet: srcSets.base.join(',\\n') || null,\n    srcSetWebp: srcSets.webp.join(',\\n') || null\n  }\n}\n\nexport default getFixedGatsbyImage\n","import getBasicImageProps from './utils/getBasicImageProps'\nimport buildUrl, { buildLowFiUrl } from './utils/buildImageUrl'\nimport { isWebP } from './utils/helpers'\nimport { sizeMultipliersFluid, defaultFluidOptions } from './defaults'\n\nfunction getFluidGatsbyImage(image, args = {}) {\n  let imageProps = getBasicImageProps(image)\n\n  if (!imageProps) {\n    return null\n  }\n\n  let options = {\n    ...defaultFluidOptions,\n    ...args\n  }\n\n  let { maxWidth, base64, useBase64 } = options\n\n  let {\n    metadata: { dimensions, lqip },\n    originalPath\n  } = imageProps\n\n  let desiredAspectRatio = dimensions.aspectRatio\n\n  // If we're cropping, calculate the specified aspect ratio\n  if (options.maxHeight) {\n    desiredAspectRatio = maxWidth / options.maxHeight\n  }\n\n  let maxHeight = options.maxHeight || Math.round(maxWidth / dimensions.aspectRatio)\n\n  let forceConvert = null\n  if (options.toFormat) {\n    forceConvert = options.toFormat\n  } else if (isWebP(originalPath)) {\n    forceConvert = 'jpg'\n  }\n\n  let sizes = options.sizes || `(max-width: ${maxWidth}px) 100vw, ${maxWidth}px`\n  let widths = sizeMultipliersFluid\n    .map((scale) => Math.round(maxWidth * scale))\n    .filter((width) => width < dimensions.width)\n    .concat(dimensions.width)\n\n  let initial = { webp: [], base: [] }\n  let srcSets = widths\n    .filter((currentWidth) => currentWidth < dimensions.width)\n    .reduce((acc, currentWidth) => {\n      let currentHeight = Math.round(currentWidth / desiredAspectRatio)\n\n      let size = {\n        width: currentWidth,\n        height: currentHeight\n      }\n\n      let webpUrl = buildUrl(originalPath, {\n        ...options,\n        ...size,\n        ...{ format: 'webp' }\n      })\n\n      let baseUrl = buildUrl(originalPath, {\n        ...options,\n        ...size,\n        ...{ format: forceConvert }\n      })\n\n      acc.webp.push(`${webpUrl} ${currentWidth}w`)\n      acc.base.push(`${baseUrl} ${currentWidth}w`)\n      return acc\n    }, initial)\n\n  let imgSize = { width: maxWidth, height: maxHeight }\n\n  let src = buildUrl(originalPath, {\n    ...options,\n    ...imgSize,\n    ...{ format: forceConvert }\n  })\n\n  let srcWebp = buildUrl(originalPath, {\n    ...options,\n    ...imgSize,\n    ...{ format: 'webp' }\n  })\n\n  return {\n    base64: buildLowFiUrl(originalPath, { width: maxWidth, height: maxHeight, aspectRatio: desiredAspectRatio }),\n    aspectRatio: desiredAspectRatio,\n    src,\n    srcWebp,\n    srcSet: srcSets.base.join(',\\n') || null,\n    srcSetWebp: srcSets.webp.join(',\\n') || null,\n    sizes\n  }\n}\n\nexport default getFluidGatsbyImage\n"],"names":["const","validImageUrlPattern","getBasicImageProps","image","url","lqip","base64","test","originalPath","replace","split","map","num","parseInt","filename","dimensions","width","height","STORYBLOK_BASE_URL","sizeMultipliersFixed","sizeMultipliersFluid","defaultOptions","smartCrop","format","fill","toFormat","useBase64","quality","defaultFluidOptions","Object","maxWidth","maxHeight","defaultFixedOptions","isWebP","isConverted","includes","isOriginal","buildImageUrl","filters","filter","element","Boolean","length","reduce","acc","currentFilter","i","applyFilters","buildLowFiUrl","ref","toFixed","args","imageProps","options","desiredAspectRatio","aspectRatio","forceConvert","srcSets","scale","Math","round","currentWidth","resolution","currentHeight","size","webpUrl","buildUrl","baseUrl","webp","push","base","outputHeight","imgSize","src","srcWebp","srcSet","join","srcSetWebp","sizes","concat"],"mappings":"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"}